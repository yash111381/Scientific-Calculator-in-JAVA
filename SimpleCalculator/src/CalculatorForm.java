
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.text.DefaultCaret;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Yash
 */
public class CalculatorForm extends javax.swing.JFrame {
    private boolean opSelected=false,equalsSelected=false;
    private String strTemp1="";
    private String strTemp2="";
    private String strTemp3="";
    
    private String strTemp="";
    private String operation="";
    private String memory="";
    private ArrayList<String> arr=new ArrayList<>();
    private ArrayList<String> nums=new ArrayList<>();
    private boolean min=false;
    File file;
    /**
     * Creates new form CalculatorForm
     */
    public CalculatorForm() throws IOException {
        initComponents();
        DefaultCaret caret = (DefaultCaret) txtHistory.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        txtHistory.setText(readFile("D:/calc/calc.txt"));
        
        arr.clear();
        nums.clear();
        file =new File("D:/calc/calc.txt");
    		
    		//if file doesnt exists, then create it
    		if(!file.exists()){
                    System.out.println("NO!\n");
    			file.createNewFile();
    	}
                else{
                    System.out.println("Thereq!\n");
                }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSlider1 = new javax.swing.JSlider();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        mem = new javax.swing.JTextField();
        answerField = new javax.swing.JTextField();
        textQuestion = new javax.swing.JTextField();
        backspace = new java.awt.Button();
        div = new java.awt.Button();
        minus = new java.awt.Button();
        madd = new java.awt.Button();
        clear = new java.awt.Button();
        mc = new java.awt.Button();
        mr = new java.awt.Button();
        six = new java.awt.Button();
        zero = new java.awt.Button();
        three = new java.awt.Button();
        sub = new java.awt.Button();
        mul = new java.awt.Button();
        add = new java.awt.Button();
        nine = new java.awt.Button();
        equals = new java.awt.Button();
        one = new java.awt.Button();
        five = new java.awt.Button();
        eight = new java.awt.Button();
        two = new java.awt.Button();
        four = new java.awt.Button();
        sin = new java.awt.Button();
        tan = new java.awt.Button();
        xy = new java.awt.Button();
        tenx = new java.awt.Button();
        seven = new java.awt.Button();
        rooty = new java.awt.Button();
        root = new java.awt.Button();
        x2 = new java.awt.Button();
        ln = new java.awt.Button();
        pi = new java.awt.Button();
        log = new java.awt.Button();
        nfact = new java.awt.Button();
        cos = new java.awt.Button();
        decimal = new java.awt.Button();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtHistory = new javax.swing.JTextArea();
        clrHistory = new java.awt.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setForeground(new java.awt.Color(0, 0, 0));

        jInternalFrame1.setBackground(new java.awt.Color(0, 0, 0));
        jInternalFrame1.setVisible(true);

        mem.setEditable(false);
        mem.setBackground(new java.awt.Color(0, 0, 0));
        mem.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        mem.setForeground(new java.awt.Color(255, 255, 255));
        mem.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        mem.setText("");
        mem.setBorder(null);
        mem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memActionPerformed(evt);
            }
        });

        answerField.setBackground(new java.awt.Color(0, 0, 0));
        answerField.setFont(new java.awt.Font("Arial Unicode MS", 1, 36)); // NOI18N
        answerField.setForeground(new java.awt.Color(255, 255, 255));
        answerField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        answerField.setText("0");
        answerField.setBorder(null);

        textQuestion.setBackground(new java.awt.Color(0, 0, 0));
        textQuestion.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        textQuestion.setForeground(new java.awt.Color(255, 255, 255));
        textQuestion.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        textQuestion.setBorder(null);

        backspace.setBackground(new java.awt.Color(102, 102, 102));
        backspace.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        backspace.setForeground(new java.awt.Color(255, 255, 255));
        backspace.setLabel("<-");
        backspace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backspaceActionPerformed(evt);
            }
        });

        div.setBackground(new java.awt.Color(102, 102, 102));
        div.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        div.setForeground(new java.awt.Color(255, 255, 255));
        div.setLabel("/");
        div.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                divActionPerformed(evt);
            }
        });

        minus.setBackground(new java.awt.Color(102, 102, 102));
        minus.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        minus.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        minus.setForeground(new java.awt.Color(255, 255, 255));
        minus.setLabel("(-)");
        minus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minusActionPerformed(evt);
            }
        });

        madd.setBackground(new java.awt.Color(102, 102, 102));
        madd.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        madd.setForeground(new java.awt.Color(255, 255, 255));
        madd.setLabel("M+");
        madd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maddActionPerformed(evt);
            }
        });

        clear.setBackground(new java.awt.Color(102, 102, 102));
        clear.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        clear.setForeground(new java.awt.Color(255, 255, 255));
        clear.setLabel("C");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        mc.setBackground(new java.awt.Color(102, 102, 102));
        mc.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        mc.setForeground(new java.awt.Color(255, 255, 255));
        mc.setLabel("MC");
        mc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mcActionPerformed(evt);
            }
        });

        mr.setBackground(new java.awt.Color(102, 102, 102));
        mr.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        mr.setForeground(new java.awt.Color(255, 255, 255));
        mr.setLabel("MR");
        mr.setName(""); // NOI18N
        mr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mrActionPerformed(evt);
            }
        });

        six.setBackground(new java.awt.Color(51, 51, 51));
        six.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        six.setForeground(new java.awt.Color(255, 255, 255));
        six.setLabel("6");
        six.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sixActionPerformed(evt);
            }
        });

        zero.setBackground(new java.awt.Color(51, 51, 51));
        zero.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        zero.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        zero.setForeground(new java.awt.Color(255, 255, 255));
        zero.setLabel("0");
        zero.setPreferredSize(new java.awt.Dimension(29, 40));
        zero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zeroActionPerformed(evt);
            }
        });

        three.setBackground(new java.awt.Color(51, 51, 51));
        three.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        three.setForeground(new java.awt.Color(255, 255, 255));
        three.setLabel("3");
        three.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                threeActionPerformed(evt);
            }
        });

        sub.setBackground(new java.awt.Color(102, 102, 102));
        sub.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        sub.setForeground(new java.awt.Color(255, 255, 255));
        sub.setLabel("-");
        sub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subActionPerformed(evt);
            }
        });

        mul.setBackground(new java.awt.Color(102, 102, 102));
        mul.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        mul.setForeground(new java.awt.Color(255, 255, 255));
        mul.setLabel("X");
        mul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mulActionPerformed(evt);
            }
        });

        add.setBackground(new java.awt.Color(102, 102, 102));
        add.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        add.setForeground(new java.awt.Color(255, 255, 255));
        add.setLabel("+");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        nine.setBackground(new java.awt.Color(51, 51, 51));
        nine.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        nine.setForeground(new java.awt.Color(255, 255, 255));
        nine.setLabel("9");
        nine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nineActionPerformed(evt);
            }
        });

        equals.setBackground(new java.awt.Color(102, 102, 255));
        equals.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        equals.setForeground(new java.awt.Color(255, 255, 255));
        equals.setLabel("=");
        equals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalsActionPerformed(evt);
            }
        });

        one.setBackground(new java.awt.Color(51, 51, 51));
        one.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        one.setForeground(new java.awt.Color(255, 255, 255));
        one.setLabel("1");
        one.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneActionPerformed(evt);
            }
        });

        five.setBackground(new java.awt.Color(51, 51, 51));
        five.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        five.setForeground(new java.awt.Color(255, 255, 255));
        five.setLabel("5");
        five.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fiveActionPerformed(evt);
            }
        });

        eight.setBackground(new java.awt.Color(51, 51, 51));
        eight.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        eight.setForeground(new java.awt.Color(255, 255, 255));
        eight.setLabel("8");
        eight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightActionPerformed(evt);
            }
        });

        two.setBackground(new java.awt.Color(51, 51, 51));
        two.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        two.setForeground(new java.awt.Color(255, 255, 255));
        two.setLabel("2");
        two.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twoActionPerformed(evt);
            }
        });

        four.setBackground(new java.awt.Color(51, 51, 51));
        four.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        four.setForeground(new java.awt.Color(255, 255, 255));
        four.setLabel("4");
        four.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fourActionPerformed(evt);
            }
        });

        sin.setBackground(new java.awt.Color(102, 102, 102));
        sin.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        sin.setForeground(new java.awt.Color(255, 255, 255));
        sin.setLabel("sin");
        sin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sinActionPerformed(evt);
            }
        });

        tan.setBackground(new java.awt.Color(102, 102, 102));
        tan.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        tan.setForeground(new java.awt.Color(255, 255, 255));
        tan.setLabel("tan");
        tan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tanActionPerformed(evt);
            }
        });

        xy.setBackground(new java.awt.Color(102, 102, 102));
        xy.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        xy.setForeground(new java.awt.Color(255, 255, 255));
        xy.setLabel("x^y");
        xy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xyActionPerformed(evt);
            }
        });

        tenx.setBackground(new java.awt.Color(102, 102, 102));
        tenx.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        tenx.setForeground(new java.awt.Color(255, 255, 255));
        tenx.setLabel("10^x");
        tenx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tenxActionPerformed(evt);
            }
        });

        seven.setBackground(new java.awt.Color(51, 51, 51));
        seven.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        seven.setForeground(new java.awt.Color(255, 255, 255));
        seven.setLabel("7");
        seven.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sevenActionPerformed(evt);
            }
        });

        rooty.setBackground(new java.awt.Color(102, 102, 102));
        rooty.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        rooty.setForeground(new java.awt.Color(255, 255, 255));
        rooty.setLabel("ythroot");
        rooty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rootyActionPerformed(evt);
            }
        });

        root.setBackground(new java.awt.Color(102, 102, 102));
        root.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        root.setForeground(new java.awt.Color(255, 255, 255));
        root.setLabel("root");
        root.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rootActionPerformed(evt);
            }
        });

        x2.setBackground(new java.awt.Color(102, 102, 102));
        x2.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        x2.setForeground(new java.awt.Color(255, 255, 255));
        x2.setLabel("x^2");
        x2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                x2ActionPerformed(evt);
            }
        });

        ln.setBackground(new java.awt.Color(102, 102, 102));
        ln.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        ln.setForeground(new java.awt.Color(255, 255, 255));
        ln.setLabel("ln");
        ln.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lnActionPerformed(evt);
            }
        });

        pi.setBackground(new java.awt.Color(102, 102, 102));
        pi.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        pi.setForeground(new java.awt.Color(255, 255, 255));
        pi.setLabel("pi");
        pi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                piActionPerformed(evt);
            }
        });

        log.setBackground(new java.awt.Color(102, 102, 102));
        log.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        log.setForeground(new java.awt.Color(255, 255, 255));
        log.setLabel("log");
        log.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logActionPerformed(evt);
            }
        });

        nfact.setBackground(new java.awt.Color(102, 102, 102));
        nfact.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        nfact.setForeground(new java.awt.Color(255, 255, 255));
        nfact.setLabel("n!");
        nfact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nfactActionPerformed(evt);
            }
        });

        cos.setBackground(new java.awt.Color(102, 102, 102));
        cos.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        cos.setForeground(new java.awt.Color(255, 255, 255));
        cos.setLabel("cos");
        cos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cosActionPerformed(evt);
            }
        });

        decimal.setBackground(new java.awt.Color(51, 51, 51));
        decimal.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        decimal.setForeground(new java.awt.Color(255, 255, 255));
        decimal.setLabel(".");
        decimal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decimalActionPerformed(evt);
            }
        });

        txtHistory.setBackground(new java.awt.Color(0, 0, 0));
        txtHistory.setColumns(20);
        txtHistory.setFont(new java.awt.Font("Monospaced", 0, 15)); // NOI18N
        txtHistory.setForeground(new java.awt.Color(255, 255, 255));
        txtHistory.setRows(5);
        txtHistory.setBorder(null);
        jScrollPane1.setViewportView(txtHistory);
        txtHistory.setEditable(false);
        txtHistory.addKeyListener(ct);

        clrHistory.setBackground(new java.awt.Color(102, 0, 0));
        clrHistory.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        clrHistory.setForeground(new java.awt.Color(255, 255, 255));
        clrHistory.setLabel("Clear History");
        clrHistory.setName(""); // NOI18N
        clrHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clrHistoryActionPerformed(evt);
            }
        });

        jInternalFrame1.addKeyListener(ct);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame1Layout.createSequentialGroup()
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addContainerGap(20, Short.MAX_VALUE)
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame1Layout.createSequentialGroup()
                                .addComponent(sin, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cos, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tan, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame1Layout.createSequentialGroup()
                                .addComponent(ln, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(log, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tenx, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame1Layout.createSequentialGroup()
                                .addComponent(pi, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(root, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rooty, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame1Layout.createSequentialGroup()
                                .addComponent(nfact, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(x2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(xy, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(mc, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mr, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(madd, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                .addComponent(mem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(clrHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame1Layout.createSequentialGroup()
                        .addComponent(seven, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(eight, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nine, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mul, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame1Layout.createSequentialGroup()
                        .addComponent(four, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(five, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(six, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sub, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame1Layout.createSequentialGroup()
                        .addComponent(one, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(two, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(three, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame1Layout.createSequentialGroup()
                        .addComponent(zero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(decimal, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(equals, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame1Layout.createSequentialGroup()
                        .addComponent(clear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(backspace, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(minus, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(div, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(answerField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(textQuestion, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame1Layout.createSequentialGroup()
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(clrHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(answerField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(backspace, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minus, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(div, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(madd, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mc, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mr, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mul, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nine, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(seven, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(root, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pi, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rooty, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(sub, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(five, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(four, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tan, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(sin, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cos, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(two, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(three, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(one, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(tenx, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(ln, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(log, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(six, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(zero, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(equals, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(xy, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(x2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(nfact, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(decimal, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(eight, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        mem.addKeyListener(ct);
        answerField.setEditable(false);
        answerField.addKeyListener(ct);
        textQuestion.setEditable(false);
        textQuestion.addKeyListener(ct);
        backspace.addKeyListener(ct);
        div.addKeyListener(ct);
        minus.addKeyListener(ct);
        madd.addKeyListener(ct);
        clear.addKeyListener(ct);
        mc.addKeyListener(ct);
        mr.addKeyListener(ct);
        six.addKeyListener(ct);
        zero.addKeyListener(ct);
        three.addKeyListener(ct);
        sub.addKeyListener(ct);
        mul.addKeyListener(ct);
        add.addKeyListener(ct);
        nine.addKeyListener(ct);
        equals.addKeyListener(ct);
        one.addKeyListener(ct);
        five.addKeyListener(ct);
        eight.addKeyListener(ct);
        two.addKeyListener(ct);
        four.addKeyListener(ct);
        sin.addKeyListener(ct);
        tan.addKeyListener(ct);
        xy.addKeyListener(ct);
        tenx.addKeyListener(ct);
        seven.addKeyListener(ct);
        rooty.addKeyListener(ct);
        root.addKeyListener(ct);
        x2.addKeyListener(ct);
        ln.addKeyListener(ct);
        pi.addKeyListener(ct);
        log.addKeyListener(ct);
        nfact.addKeyListener(ct);
        cos.addKeyListener(ct);
        decimal.addKeyListener(ct);
        clrHistory.addKeyListener(ct);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jInternalFrame1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jInternalFrame1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void divActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_divActionPerformed
        // TODO add your handling code here:
        min=false;
        if(strTemp=="" && strTemp3!=""){
            strTemp1=strTemp3;
            strTemp=strTemp3;
        }
        if(strTemp1==""){
            strTemp1="0";
            strTemp+="0";
        }
        System.out.println(strTemp.charAt(strTemp.length()-1));
        if(strTemp.charAt(strTemp.length()-1)=='+' || strTemp.charAt(strTemp.length()-1)=='-' || strTemp.charAt(strTemp.length()-1)=='*' || strTemp.charAt(strTemp.length()-1)=='/' || strTemp.charAt(strTemp.length()-1)=='^' || strTemp.charAt(strTemp.length()-1)=='v'){
         //   nums.add(strTemp2);
            equalsClick();
        }
        opSelected=true;
        operation="/";
        if(strTemp1!="" && strTemp2!=""){
            strTemp1=strTemp2;
            strTemp2="";
        }
        nums.add(strTemp1);
        strTemp+="/";
        dummyresult();
        arr.add("/");
        System.out.println(strTemp.charAt(strTemp.length()-1));
    }//GEN-LAST:event_divActionPerformed

    private void oneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneActionPerformed
        // TODO add your handling code here:
        if(!opSelected){
            if(strTemp1==""){
                strTemp="1";
                strTemp1="1";
            }
            else{
                strTemp+="1";
                strTemp1+="1";
            }
            answerField.setText(strTemp1);
        }
        else{
            textQuestion.setText(strTemp);
            if(strTemp2==""){
                strTemp+="1";
                strTemp2="1";
                System.out.println(strTemp2);
            }
            else{
                strTemp+="1";
                strTemp2+="1";
                System.out.println(strTemp2);
            }
            answerField.setText(strTemp2);
        }
        
    }//GEN-LAST:event_oneActionPerformed

    private void twoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twoActionPerformed
        // TODO add your handling code here:
        if(!opSelected){
            if(strTemp1==""){
                strTemp="2";
                strTemp1="2";
            }
            else{
                strTemp+="2";
                strTemp1+="2";
            }
            answerField.setText(strTemp1);
        }
        else{
            textQuestion.setText(strTemp);
            if(strTemp2==""){
                strTemp+="2";
                strTemp2="2";
                System.out.println(strTemp2);
            }
            else{
                strTemp+="2";
                strTemp2+="2";
                System.out.println(strTemp2);
            }
            answerField.setText(strTemp2);
        }
    }//GEN-LAST:event_twoActionPerformed

    private void threeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_threeActionPerformed
        // TODO add your handling code here:
        if(!opSelected){
            if(strTemp1==""){
                strTemp="3";
                strTemp1="3";
            }
            else{
                strTemp+="3";
                strTemp1+="3";
            }
            answerField.setText(strTemp1);
        }
        else{
            textQuestion.setText(strTemp);
            if(strTemp2==""){
                strTemp+="3";
                strTemp2="3";
                System.out.println(strTemp2);
            }
            else{
                strTemp+="3";
                strTemp2+="3";
                System.out.println(strTemp2);
            }
            answerField.setText(strTemp2);
        }
    }//GEN-LAST:event_threeActionPerformed
      
    private void fourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fourActionPerformed
        // TODO add your handling code here:
        if(!opSelected){
            if(strTemp1==""){
                strTemp="4";
                strTemp1="4";
            }
            else{
                strTemp+="4";
                strTemp1+="4";
            }
            answerField.setText(strTemp1);
        }
        else{
            textQuestion.setText(strTemp);
            if(strTemp2==""){
                strTemp+="4";
                strTemp2="4";
                System.out.println(strTemp2);
            }
            else{
                strTemp+="4";
                strTemp2+="4";
                System.out.println(strTemp2);
            }
            answerField.setText(strTemp2);
        }
        
    }//GEN-LAST:event_fourActionPerformed
  
    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        // TODO add your handling code here:
        min=false;
        if(strTemp=="" && strTemp3!=""){
            strTemp1=strTemp3;
            strTemp=strTemp3;
        }
        if(strTemp1==""){
            strTemp1="0";
            strTemp+="0";
        }
        System.out.println(strTemp.charAt(strTemp.length()-1));
        if(strTemp.charAt(strTemp.length()-1)=='+' || strTemp.charAt(strTemp.length()-1)=='-' || strTemp.charAt(strTemp.length()-1)=='*' || strTemp.charAt(strTemp.length()-1)=='/' || strTemp.charAt(strTemp.length()-1)=='^' || strTemp.charAt(strTemp.length()-1)=='v'){
         //   nums.add(strTemp2);
            equalsClick();
        }
        opSelected=true;
        operation="+";
        if(strTemp1!="" && strTemp2!=""){
            strTemp1=strTemp2;
            strTemp2="";
        }
        nums.add(strTemp1);
        strTemp+="+";
        dummyresult();
        arr.add("+");
        System.out.println(strTemp.charAt(strTemp.length()-1));
    }//GEN-LAST:event_addActionPerformed

    public void equalsClick(){
        strTemp=strTemp.substring(0, strTemp.length()-1);
        System.out.println(arr.toString());
        if(strTemp1!="" || strTemp2!=""){
            strTemp1=strTemp2;
            strTemp2="";
        }
    }
    
    public void dummyresult(){
        ArrayList<String> tarr=(ArrayList<String>) arr.clone();
        ArrayList<String> tnums=(ArrayList<String>) nums.clone();
        while(!tarr.isEmpty()){
            if(arr.contains("^")){
                int index=arr.lastIndexOf("^");
                double num1=Double.parseDouble(nums.get(index));
                double num2=Double.parseDouble(nums.get(index+1));
                double ans=Math.pow(num1, num2);
                nums.remove(index+1);
                nums.remove(index);
                
                nums.add(index, String.valueOf(ans));
                arr.remove(index);
            }
             
             else if(arr.contains("v")){
                int index=arr.lastIndexOf("v");
                double num1=Double.parseDouble(nums.get(index));
                double num2=Double.parseDouble(nums.get(index+1));
                double ans=Math.pow(num1, 1/num2);
                nums.remove(index+1);
                nums.remove(index);
                nums.add(index, String.valueOf(ans));
                arr.remove(index);
            }
             else if(arr.contains("/")){
                int index=arr.lastIndexOf("/");
                double num1=Double.parseDouble(nums.get(index));
                double num2=Double.parseDouble(nums.get(index+1));
                double ans=num1/num2;
                nums.remove(index+1);
                nums.remove(index);
                
                nums.add(index, String.valueOf(ans));
                arr.remove(index);
            }
            else if(tarr.contains("*")){
                int tindex=tarr.lastIndexOf("*");
                double tnum1=Double.parseDouble(tnums.get(tindex));
                double tnum2=Double.parseDouble(tnums.get(tindex+1));
                double tans=tnum1*tnum2;
                tnums.remove(tindex+1);
                tnums.remove(tindex);
                
                tnums.add(tindex, String.valueOf(tans));
                tarr.remove(tindex);
            }
            else if(tarr.contains("+")){
                int tindex=tarr.lastIndexOf("+");
                double tnum1=Double.parseDouble(tnums.get(tindex));
                double tnum2=Double.parseDouble(tnums.get(tindex+1));
                double tans=tnum1+tnum2;
                tnums.remove(tindex+1);
                tnums.remove(tindex);
                
                tnums.add(tindex, String.valueOf(tans));
                tarr.remove(tindex);
            }
            else if(tarr.contains("-")){
                int tindex=tarr.lastIndexOf("-");
                double tnum1=Double.parseDouble(tnums.get(tindex));
                double tnum2=Double.parseDouble(tnums.get(tindex+1));
                double tans=tnum1-tnum2;
                tnums.remove(tindex+1);
                tnums.remove(tindex);
                
                tnums.add(tindex, String.valueOf(tans));
                tarr.remove(tindex);
            }
        }
        
        answerField.setText(tnums.iterator().next());
    }
    
    private void equalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalsActionPerformed
        
        System.out.println(strTemp);
        if(strTemp.charAt(strTemp.length()-1)=='+' || strTemp.charAt(strTemp.length()-1)=='-' || strTemp.charAt(strTemp.length()-1)=='*' ||strTemp.charAt(strTemp.length()-1)=='/' || strTemp.charAt(strTemp.length()-1)=='^' || strTemp.charAt(strTemp.length()-1)=='v'){
            if(strTemp1==""){
                strTemp2="0";
            }
            strTemp2=strTemp1;
            strTemp+=strTemp2;
            System.out.println(arr.toString());
            System.out.println(nums.toString());
            
            nums.add(strTemp2);
            result();
        }
        else{
            System.out.println(strTemp);
            
            System.out.println(arr.toString());
            System.out.println(nums.toString());
            nums.add(strTemp2);
            result();
        }
        textQuestion.setText(strTemp);
        answerField.setText(nums.iterator().next());
        try{
            FileWriter fileWritter = new FileWriter(file,true);
            BufferedWriter bufferWritter = new BufferedWriter(fileWritter);
            bufferWritter.write(strTemp+"="+nums.iterator().next());
            bufferWritter.write("\n");
            bufferWritter.close();
            System.out.println("Done");
        }catch(IOException e){
            e.printStackTrace();
        }
        DefaultCaret caret = (DefaultCaret) txtHistory.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        try {
            txtHistory.setText(readFile("D:/calc/calc.txt"));
        } catch (IOException ex) {
            Logger.getLogger(CalculatorForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        strTemp="";
        strTemp3=nums.iterator().next();
        strTemp1="";
        strTemp2="";
        opSelected=false;
        min=false;
        System.out.println(arr.toString());
        System.out.println(nums.toString());
        nums.clear();
        arr.clear();
        
    }//GEN-LAST:event_equalsActionPerformed

    private void fiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fiveActionPerformed
        // TODO add your handling code here:
        if(!opSelected){
            if(strTemp1==""){
                strTemp="5";
                strTemp1="5";
            }
            else{
                strTemp+="5";
                strTemp1+="5";
            }
            answerField.setText(strTemp1);
        }
        else{
            textQuestion.setText(strTemp);
            if(strTemp2==""){
                strTemp+="5";
                strTemp2="5";
                System.out.println(strTemp2);
            }
            else{
                strTemp+="5";
                strTemp2+="5";
                System.out.println(strTemp2);
            }
            answerField.setText(strTemp2);
        }
    }//GEN-LAST:event_fiveActionPerformed

    private void sixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sixActionPerformed
        // TODO add your handling code here:
        if(!opSelected){
            if(strTemp1==""){
                strTemp="6";
                strTemp1="6";
            }
            else{
                strTemp+="6";
                strTemp1+="6";
            }
            answerField.setText(strTemp1);
        }
        else{
            textQuestion.setText(strTemp);
            if(strTemp2==""){
                strTemp+="6";
                strTemp2="6";
                System.out.println(strTemp2);
            }
            else{
                strTemp+="6";
                strTemp2+="6";
                System.out.println(strTemp2);
            }
            answerField.setText(strTemp2);
        }
    }//GEN-LAST:event_sixActionPerformed

    private void sevenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sevenActionPerformed
        // TODO add your handling code here:
        if(!opSelected){
            if(strTemp1==""){
                strTemp="7";
                strTemp1="7";
            }
            else{
                strTemp+="7";
                strTemp1+="7";
            }
            answerField.setText(strTemp1);
        }
        else{
            textQuestion.setText(strTemp);
            if(strTemp2==""){
                strTemp+="7";
                strTemp2="7";
                System.out.println(strTemp2);
            }
            else{
                strTemp+="7";
                strTemp2+="7";
                System.out.println(strTemp2);
            }
            answerField.setText(strTemp2);
        }
    }//GEN-LAST:event_sevenActionPerformed

    private void eightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightActionPerformed
        // TODO add your handling code here:
        if(!opSelected){
            if(strTemp1==""){
                strTemp="8";
                strTemp1="8";
            }
            else{
                strTemp+="8";
                strTemp1+="8";
            }
            answerField.setText(strTemp1);
        }
        else{
            textQuestion.setText(strTemp);
            if(strTemp2==""){
                strTemp+="8";
                strTemp2="8";
                System.out.println(strTemp2);
            }
            else{
                strTemp+="8";
                strTemp2+="8";
                System.out.println(strTemp2);
            }
            answerField.setText(strTemp2);
        }
    }//GEN-LAST:event_eightActionPerformed

    private void nineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nineActionPerformed
        // TODO add your handling code here:
        if(!opSelected){
            if(strTemp1==""){
                strTemp="9";
                strTemp1="9";
            }
            else{
                strTemp+="9";
                strTemp1+="9";
            }
            answerField.setText(strTemp1);
        }
        else{
            textQuestion.setText(strTemp);
            if(strTemp2==""){
                strTemp+="9";
                strTemp2="9";
                System.out.println(strTemp2);
            }
            else{
                strTemp+="9";
                strTemp2+="9";
                System.out.println(strTemp2);
            }
            answerField.setText(strTemp2);
        }
    }//GEN-LAST:event_nineActionPerformed

    private void zeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zeroActionPerformed
        // TODO add your handling code here:
        if(!opSelected){
            if(strTemp1==""){
                strTemp="0";
                strTemp1="0";
            }
            else{
                strTemp+="0";
                strTemp1+="0";
            }
            answerField.setText(strTemp1);
        }
        else{
            textQuestion.setText(strTemp);
            if(strTemp2==""){
                strTemp+="0";
                strTemp2="0";
                System.out.println(strTemp2);
            }
            else{
                strTemp+="0";
                strTemp2+="0";
                System.out.println(strTemp2);
            }
            answerField.setText(strTemp2);
        }
    }//GEN-LAST:event_zeroActionPerformed

    private void decimalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decimalActionPerformed
        // TODO add your handling code here:
        if(!opSelected){
            if(strTemp1==""){
                strTemp="0.";
                strTemp1="0.";
            }
            else{
                if(!strTemp1.contains(".")){
                strTemp+=".";
                strTemp1+=".";}
                else{
                    System.out.println("Only one decimal point accepted\n");
                }
            }
            answerField.setText(strTemp1);
        }
        else{
            textQuestion.setText(strTemp);
            if(strTemp2==""){
                strTemp+="0.";
                strTemp2="0.";
                System.out.println(strTemp2);
            }
            else{
                if(!strTemp2.contains(".")){
                strTemp+=".";
                strTemp2+=".";}
                else{
                    System.out.println("Only one decimal point accepted\n");
                }
                System.out.println(strTemp2);
            }
            answerField.setText(strTemp2);
        }
    }//GEN-LAST:event_decimalActionPerformed

    private void subActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subActionPerformed
        // TODO add your handling code here:
        min=false;
        if(strTemp=="" && strTemp3!=""){
            strTemp1=strTemp3;
            strTemp=strTemp3;
        }
        if(strTemp1==""){
            strTemp1="0";
            strTemp+="0";
        }
        System.out.println(strTemp.charAt(strTemp.length()-1));
        if(strTemp.charAt(strTemp.length()-1)=='+' || strTemp.charAt(strTemp.length()-1)=='-' || strTemp.charAt(strTemp.length()-1)=='*' || strTemp.charAt(strTemp.length()-1)=='/' || strTemp.charAt(strTemp.length()-1)=='^' || strTemp.charAt(strTemp.length()-1)=='v'){
         //   nums.add(strTemp2);
            equalsClick();
        }
        opSelected=true;
        operation="-";
        if(strTemp1!="" && strTemp2!=""){
            strTemp1=strTemp2;
            strTemp2="";
        }
        nums.add(strTemp1);
        strTemp+="-";
        dummyresult();
        arr.add("-");
        System.out.println(strTemp.charAt(strTemp.length()-1));
    }//GEN-LAST:event_subActionPerformed

    private void mulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mulActionPerformed
        // TODO add your handling code here:
        min=false;
        if(strTemp=="" && strTemp3!=""){
            strTemp1=strTemp3;
            strTemp=strTemp3;
        }
        if(strTemp1==""){
            strTemp1="0";
            strTemp+="0";
        }
        System.out.println(strTemp.charAt(strTemp.length()-1));
        if(strTemp.charAt(strTemp.length()-1)=='+' || strTemp.charAt(strTemp.length()-1)=='-' || strTemp.charAt(strTemp.length()-1)=='*' || strTemp.charAt(strTemp.length()-1)=='/' || strTemp.charAt(strTemp.length()-1)=='^' || strTemp.charAt(strTemp.length()-1)=='v'){
         //   nums.add(strTemp2);
            equalsClick();
        }
        opSelected=true;
        operation="*";
        if(strTemp1!="" && strTemp2!=""){
            strTemp1=strTemp2;
            strTemp2="";
        }
        nums.add(strTemp1);
        strTemp+="*";
        dummyresult();
        arr.add("*");
        System.out.println(strTemp.charAt(strTemp.length()-1));
    }//GEN-LAST:event_mulActionPerformed

    private void minusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minusActionPerformed
        // TODO add your handling code here:
        if(!opSelected){
            if(strTemp1==""){
                if(!min){
                strTemp="-0";
                strTemp1="-0";
                min=true;}
                else{
                    strTemp1="";
                    strTemp="";
                    min=false;
                }
            }
            else{
                if(!min){
                min=true;
                strTemp1="-"+strTemp1;
                strTemp="-"+strTemp;
                }
                else{
                    min=false;
                    strTemp1=strTemp1.substring(1);
                    strTemp=strTemp.substring(1);
                }
            }
            answerField.setText(strTemp1);
        }
        else{
            textQuestion.setText(strTemp);
            if(strTemp2==""){
                if(!min){
                strTemp+="-0";
                strTemp2="-0";
                min=true;}
                else{
                    strTemp2="";
                    strTemp=strTemp.substring(0,strTemp.length()-2);
                    min=false;
                }
            }
            else{
                if(!min){
                min=true;
                strTemp=strTemp.substring(0, strTemp.length()-strTemp2.length())+"-"+strTemp2;
                strTemp2="-"+strTemp2;
                
                }
                else{
                    min=false;
                    strTemp=strTemp.substring(0,strTemp.length()-strTemp2.length())+strTemp.substring(strTemp.length()-strTemp2.length()+1, strTemp.length());
                    strTemp2=strTemp2.substring(1);
                    
                }
            }
            answerField.setText(strTemp2);
        }
    }//GEN-LAST:event_minusActionPerformed

    private void backspaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backspaceActionPerformed
        // TODO add your handling code here:
          if(!opSelected){
            if(strTemp1==""){
                
            }
            else{
                strTemp=strTemp.substring(0,strTemp.length()-1);
                strTemp1=strTemp1.substring(0,strTemp1.length()-1);
                
            }
            answerField.setText(strTemp1);
        }
        else{
            textQuestion.setText(strTemp);
            if(strTemp2==""){
               
            }
            else{
                strTemp=strTemp.substring(0,strTemp.length()-1);
                strTemp2=strTemp2.substring(0,strTemp2.length()-1);
            }
            answerField.setText(strTemp2);
        }
    }//GEN-LAST:event_backspaceActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        // TODO add your handling code here:
        opSelected=false;
        min=false;
        equalsSelected=false;
        arr.clear();
        nums.clear();
        strTemp="";
        strTemp1="";
        strTemp2="";
        strTemp3="";
        answerField.setText("0");
        textQuestion.setText("");
    }//GEN-LAST:event_clearActionPerformed

    String readFile(String fileName) throws IOException {
    BufferedReader br = new BufferedReader(new FileReader(fileName));
    try {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append("\n");
            line = br.readLine();
        }
        return sb.toString();
    } finally {
        br.close();
    }
}
    
    
    private void clrHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clrHistoryActionPerformed
        // TODO add your handling code here:
        try{
        FileWriter fwOb = new FileWriter("D:/calc/calc.txt", false); 
        PrintWriter pwOb = new PrintWriter(fwOb, false);
        pwOb.flush();
        pwOb.close();
        fwOb.close();
        }
        catch(IOException e){
            e.printStackTrace();
        }
        DefaultCaret caret = (DefaultCaret) txtHistory.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        try {
            txtHistory.setText(readFile("D:/calc/calc.txt"));
        } catch (IOException ex) {
            Logger.getLogger(CalculatorForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_clrHistoryActionPerformed

    private void rootyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rootyActionPerformed
        // TODO add your handling code here:
         min=false;
        if(strTemp=="" && strTemp3!=""){
            strTemp1=strTemp3;
            strTemp=strTemp3;
        }
        if(strTemp1==""){
            strTemp1="0";
            strTemp+="0";
        }
        System.out.println(strTemp.charAt(strTemp.length()-1));
        if(strTemp.charAt(strTemp.length()-1)=='+' || strTemp.charAt(strTemp.length()-1)=='-' || strTemp.charAt(strTemp.length()-1)=='*' || strTemp.charAt(strTemp.length()-1)=='/' || strTemp.charAt(strTemp.length()-1)=='^' || strTemp.charAt(strTemp.length()-1)=='v'){
         //   nums.add(strTemp2);
            equalsClick();
        }
        opSelected=true;
        operation="v";
        if(strTemp1!="" && strTemp2!=""){
            strTemp1=strTemp2;
            strTemp2="";
        }
        nums.add(strTemp1);
        strTemp+="v";
        dummyresult();
        arr.add("v");
        System.out.println(strTemp.charAt(strTemp.length()-1));
    }//GEN-LAST:event_rootyActionPerformed

    private void xyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xyActionPerformed
        // TODO add your handling code here:
         min=false;
        if(strTemp=="" && strTemp3!=""){
            strTemp1=strTemp3;
            strTemp=strTemp3;
        }
        if(strTemp1==""){
            strTemp1="0";
            strTemp+="0";
        }
        System.out.println(strTemp.charAt(strTemp.length()-1));
        if(strTemp.charAt(strTemp.length()-1)=='+' || strTemp.charAt(strTemp.length()-1)=='-' || strTemp.charAt(strTemp.length()-1)=='*' || strTemp.charAt(strTemp.length()-1)=='/' || strTemp.charAt(strTemp.length()-1)=='^' || strTemp.charAt(strTemp.length()-1)=='v'){
         //   nums.add(strTemp2);
            equalsClick();
        }
        opSelected=true;
        operation="^";
        if(strTemp1!="" && strTemp2!=""){
            strTemp1=strTemp2;
            strTemp2="";
        }
        nums.add(strTemp1);
        strTemp+="^";
        dummyresult();
        arr.add("^");
        System.out.println(strTemp.charAt(strTemp.length()-1));
    }//GEN-LAST:event_xyActionPerformed

    private void piActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_piActionPerformed
        // TODO add your handling code here:
         if(!opSelected){
            if(strTemp1==""){
                strTemp=String.valueOf(Math.PI);
                strTemp1=String.valueOf(Math.PI);
            }
            else{
                strTemp+=String.valueOf(Math.PI);
                strTemp1+=String.valueOf(Math.PI);
            }
            answerField.setText(strTemp1);
        }
        else{
            textQuestion.setText(strTemp);
            if(strTemp2==""){
                strTemp+=String.valueOf(Math.PI);
                strTemp2=String.valueOf(Math.PI);
                System.out.println(strTemp2);
            }
            else{
                strTemp+=String.valueOf(Math.PI);
                strTemp2+=String.valueOf(Math.PI);
                System.out.println(strTemp2);
            }
            answerField.setText(strTemp2);
        }
    }//GEN-LAST:event_piActionPerformed

    private void maddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maddActionPerformed
        // TODO add your handling code here:
        memory=answerField.getText().toString();
        memAction();
    }//GEN-LAST:event_maddActionPerformed

    private void mrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mrActionPerformed
        // TODO add your handling code here:
        if(memory!=""){
            answerField.setText(memory);
        }
    }//GEN-LAST:event_mrActionPerformed

    KeyAdd ct=new KeyAdd();
    
    class KeyAdd implements KeyListener{

        @Override
        public void keyTyped(KeyEvent e) {
          //  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void keyPressed(KeyEvent e) {
            switch(e.getKeyCode()){
                
                case KeyEvent.VK_BACK_SPACE:
                     if(!opSelected){
            if(strTemp1==""){
                
            }
            else{
                strTemp=strTemp.substring(0,strTemp.length()-1);
                strTemp1=strTemp1.substring(0,strTemp1.length()-1);
                
            }
            answerField.setText(strTemp1);
        }
        else{
            textQuestion.setText(strTemp);
            if(strTemp2==""){
               
            }
            else{
                strTemp=strTemp.substring(0,strTemp.length()-1);
                strTemp2=strTemp2.substring(0,strTemp2.length()-1);
            }
            answerField.setText(strTemp2);
        }
                break;
                    
                    
                case KeyEvent.VK_EQUALS:
                case KeyEvent.VK_ENTER:
                     System.out.println(strTemp);
        if(strTemp.charAt(strTemp.length()-1)=='+' || strTemp.charAt(strTemp.length()-1)=='-' || strTemp.charAt(strTemp.length()-1)=='*' ||strTemp.charAt(strTemp.length()-1)=='/' || strTemp.charAt(strTemp.length()-1)=='^' || strTemp.charAt(strTemp.length()-1)=='v'){
            if(strTemp1==""){
                strTemp2="0";
            }
            strTemp2=strTemp1;
            strTemp+=strTemp2;
            System.out.println(arr.toString());
            System.out.println(nums.toString());
            
            nums.add(strTemp2);
            result();
        }
        else{
            System.out.println(strTemp);
            
            System.out.println(arr.toString());
            System.out.println(nums.toString());
            nums.add(strTemp2);
            result();
        }
        textQuestion.setText(strTemp);
        answerField.setText(nums.iterator().next());
        try{
            FileWriter fileWritter = new FileWriter(file,true);
            BufferedWriter bufferWritter = new BufferedWriter(fileWritter);
            bufferWritter.write(strTemp+"="+nums.iterator().next());
            bufferWritter.write("\n");
            bufferWritter.close();
            System.out.println("Done");
        }catch(IOException exp){
            exp.printStackTrace();
        }
        DefaultCaret caret = (DefaultCaret) txtHistory.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        try {
            txtHistory.setText(readFile("D:/calc/calc.txt"));
        } catch (IOException ex) {
            Logger.getLogger(CalculatorForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        strTemp="";
        strTemp3=nums.iterator().next();
        strTemp1="";
        strTemp2="";
        opSelected=false;
        min=false;
        System.out.println(arr.toString());
        System.out.println(nums.toString());
        nums.clear();
        arr.clear();
                    break;
                
                case 111:min=false;
        if(strTemp=="" && strTemp3!=""){
            strTemp1=strTemp3;
            strTemp=strTemp3;
        }
        if(strTemp1==""){
            strTemp1="0";
            strTemp+="0";
        }
        System.out.println(strTemp.charAt(strTemp.length()-1));
        if(strTemp.charAt(strTemp.length()-1)=='+' || strTemp.charAt(strTemp.length()-1)=='-' || strTemp.charAt(strTemp.length()-1)=='*' || strTemp.charAt(strTemp.length()-1)=='/' || strTemp.charAt(strTemp.length()-1)=='^' || strTemp.charAt(strTemp.length()-1)=='v'){
         //   nums.add(strTemp2);
            equalsClick();
        }
        opSelected=true;
        operation="/";
        if(strTemp1!="" && strTemp2!=""){
            strTemp1=strTemp2;
            strTemp2="";
        }
        nums.add(strTemp1);
        strTemp+="/";
        dummyresult();
        arr.add("/");
        System.out.println(strTemp.charAt(strTemp.length()-1));
                    
                    break;
                case 107:
                      min=false;
        if(strTemp=="" && strTemp3!=""){
            strTemp1=strTemp3;
            strTemp=strTemp3;
        }
        if(strTemp1==""){
            strTemp1="0";
            strTemp+="0";
        }
        System.out.println(strTemp.charAt(strTemp.length()-1));
        if(strTemp.charAt(strTemp.length()-1)=='+' || strTemp.charAt(strTemp.length()-1)=='-' || strTemp.charAt(strTemp.length()-1)=='*' || strTemp.charAt(strTemp.length()-1)=='/' || strTemp.charAt(strTemp.length()-1)=='^' || strTemp.charAt(strTemp.length()-1)=='v'){
         //   nums.add(strTemp2);
            equalsClick();
        }
        opSelected=true;
        operation="+";
        if(strTemp1!="" && strTemp2!=""){
            strTemp1=strTemp2;
            strTemp2="";
        }
        nums.add(strTemp1);
        strTemp+="+";
        dummyresult();
        arr.add("+");
        System.out.println(strTemp.charAt(strTemp.length()-1));
                    break;
                    
                case 109:
                     min=false;
        if(strTemp=="" && strTemp3!=""){
            strTemp1=strTemp3;
            strTemp=strTemp3;
        }
        if(strTemp1==""){
            strTemp1="0";
            strTemp+="0";
        }
        System.out.println(strTemp.charAt(strTemp.length()-1));
        if(strTemp.charAt(strTemp.length()-1)=='+' || strTemp.charAt(strTemp.length()-1)=='-' || strTemp.charAt(strTemp.length()-1)=='*' || strTemp.charAt(strTemp.length()-1)=='/' || strTemp.charAt(strTemp.length()-1)=='^' || strTemp.charAt(strTemp.length()-1)=='v'){
         //   nums.add(strTemp2);
            equalsClick();
        }
        opSelected=true;
        operation="-";
        if(strTemp1!="" && strTemp2!=""){
            strTemp1=strTemp2;
            strTemp2="";
        }
        nums.add(strTemp1);
        strTemp+="-";
        dummyresult();
        arr.add("-");
        System.out.println(strTemp.charAt(strTemp.length()-1));
                    break;
                    
                case 106:
                    min=false;
        if(strTemp=="" && strTemp3!=""){
            strTemp1=strTemp3;
            strTemp=strTemp3;
        }
        if(strTemp1==""){
            strTemp1="0";
            strTemp+="0";
        }
        System.out.println(strTemp.charAt(strTemp.length()-1));
        if(strTemp.charAt(strTemp.length()-1)=='+' || strTemp.charAt(strTemp.length()-1)=='-' || strTemp.charAt(strTemp.length()-1)=='*' || strTemp.charAt(strTemp.length()-1)=='/' || strTemp.charAt(strTemp.length()-1)=='^' || strTemp.charAt(strTemp.length()-1)=='v'){
         //   nums.add(strTemp2);
            equalsClick();
        }
        opSelected=true;
        operation="*";
        if(strTemp1!="" && strTemp2!=""){
            strTemp1=strTemp2;
            strTemp2="";
        }
        nums.add(strTemp1);
        strTemp+="*";
        dummyresult();
        arr.add("*");
        System.out.println(strTemp.charAt(strTemp.length()-1));
                    break;
                case 110:   
                case 190:
                      if(!opSelected){
            if(strTemp1==""){
                strTemp="0.";
                strTemp1="0.";
            }
            else{
                if(!strTemp1.contains(".")){
                strTemp+=".";
                strTemp1+=".";}
                else{
                    System.out.println("Only one decimal point accepted\n");
                }
            }
            answerField.setText(strTemp1);
        }
        else{
            textQuestion.setText(strTemp);
            if(strTemp2==""){
                strTemp+="0.";
                strTemp2="0.";
                System.out.println(strTemp2);
            }
            else{
                if(!strTemp2.contains(".")){
                strTemp+=".";
                strTemp2+=".";}
                else{
                    System.out.println("Only one decimal point accepted\n");
                }
                System.out.println(strTemp2);
            }
            answerField.setText(strTemp2);
        }
                    
                    break;
            case 97:
            case 49:if(!opSelected){
            if(strTemp1==""){
                strTemp="1";
                strTemp1="1";
            }
            else{
                strTemp+="1";
                strTemp1+="1";
            }
            answerField.setText(strTemp1);
        }
        else{
            textQuestion.setText(strTemp);
            if(strTemp2==""){
                strTemp+="1";
                strTemp2="1";
                System.out.println(strTemp2);
            }
            else{
                strTemp+="1";
                strTemp2+="1";
                System.out.println(strTemp2);
            }
            answerField.setText(strTemp2);
        }
       
                break;
            case 98:
            case 50:if(!opSelected){
            if(strTemp1==""){
                strTemp="2";
                strTemp1="2";
            }
            else{
                strTemp+="2";
                strTemp1+="2";
            }
            answerField.setText(strTemp1);
        }
        else{
            textQuestion.setText(strTemp);
            if(strTemp2==""){
                strTemp+="2";
                strTemp2="2";
                System.out.println(strTemp2);
            }
            else{
                strTemp+="2";
                strTemp2+="2";
                System.out.println(strTemp2);
            }
            answerField.setText(strTemp2);
        }
                break;
                
            case 51:
            case 99:if(!opSelected){
            if(strTemp1==""){
                strTemp="3";
                strTemp1="3";
            }
            else{
                strTemp+="3";
                strTemp1+="3";
            }
            answerField.setText(strTemp1);
        }
        else{
            textQuestion.setText(strTemp);
            if(strTemp2==""){
                strTemp+="3";
                strTemp2="3";
                System.out.println(strTemp2);
            }
            else{
                strTemp+="3";
                strTemp2+="3";
                System.out.println(strTemp2);
            }
            answerField.setText(strTemp2);
        }
            break;
                
            case 52:
            case 100:
                if(!opSelected){
            if(strTemp1==""){
                strTemp="4";
                strTemp1="4";
            }
            else{
                strTemp+="4";
                strTemp1+="4";
            }
            answerField.setText(strTemp1);
        }
        else{
            textQuestion.setText(strTemp);
            if(strTemp2==""){
                strTemp+="4";
                strTemp2="4";
                System.out.println(strTemp2);
            }
            else{
                strTemp+="4";
                strTemp2+="4";
                System.out.println(strTemp2);
            }
            answerField.setText(strTemp2);
        }
                break;
                    
            case 53:
            case 101:
                if(!opSelected){
            if(strTemp1==""){
                strTemp="5";
                strTemp1="5";
            }
            else{
                strTemp+="5";
                strTemp1+="5";
            }
            answerField.setText(strTemp1);
        }
        else{
            textQuestion.setText(strTemp);
            if(strTemp2==""){
                strTemp+="5";
                strTemp2="5";
                System.out.println(strTemp2);
            }
            else{
                strTemp+="5";
                strTemp2+="5";
                System.out.println(strTemp2);
            }
            answerField.setText(strTemp2);
        }
                break;
              
            case 54:
            case 102:if(!opSelected){
            if(strTemp1==""){
                strTemp="6";
                strTemp1="6";
            }
            else{
                strTemp+="6";
                strTemp1+="6";
            }
            answerField.setText(strTemp1);
        }
        else{
            textQuestion.setText(strTemp);
            if(strTemp2==""){
                strTemp+="6";
                strTemp2="6";
                System.out.println(strTemp2);
            }
            else{
                strTemp+="6";
                strTemp2+="6";
                System.out.println(strTemp2);
            }
            answerField.setText(strTemp2);
        }
                
                break;
                
            case 55:
            case 103:if(!opSelected){
            if(strTemp1==""){
                strTemp="7";
                strTemp1="7";
            }
            else{
                strTemp+="7";
                strTemp1+="7";
            }
            answerField.setText(strTemp1);
        }
        else{
            textQuestion.setText(strTemp);
            if(strTemp2==""){
                strTemp+="7";
                strTemp2="7";
                System.out.println(strTemp2);
            }
            else{
                strTemp+="7";
                strTemp2+="7";
                System.out.println(strTemp2);
            }
            answerField.setText(strTemp2);
        }
                
                break;
                
            case 56:
            case 104:
                if(!opSelected){
            if(strTemp1==""){
                strTemp="8";
                strTemp1="8";
            }
            else{
                strTemp+="8";
                strTemp1+="8";
            }
            answerField.setText(strTemp1);
        }
        else{
            textQuestion.setText(strTemp);
            if(strTemp2==""){
                strTemp+="8";
                strTemp2="8";
                System.out.println(strTemp2);
            }
            else{
                strTemp+="8";
                strTemp2+="8";
                System.out.println(strTemp2);
            }
            answerField.setText(strTemp2);
        }
                break;
                
            case 57:
            case 105:if(!opSelected){
            if(strTemp1==""){
                strTemp="9";
                strTemp1="9";
            }
            else{
                strTemp+="9";
                strTemp1+="9";
            }
            answerField.setText(strTemp1);
        }
        else{
            textQuestion.setText(strTemp);
            if(strTemp2==""){
                strTemp+="9";
                strTemp2="9";
                System.out.println(strTemp2);
            }
            else{
                strTemp+="9";
                strTemp2+="9";
                System.out.println(strTemp2);
            }
            answerField.setText(strTemp2);
        }
                
                break;
                
            case 48:
            case 96:if(!opSelected){
            if(strTemp1==""){
                strTemp="0";
                strTemp1="0";
            }
            else{
                strTemp+="0";
                strTemp1+="0";
            }
            answerField.setText(strTemp1);
        }
        else{
            textQuestion.setText(strTemp);
            if(strTemp2==""){
                strTemp+="0";
                strTemp2="0";
                System.out.println(strTemp2);
            }
            else{
                strTemp+="0";
                strTemp2+="0";
                System.out.println(strTemp2);
            }
            answerField.setText(strTemp2);
        }
            break;
                
            default:
                break;
            }
                
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void keyReleased(KeyEvent e) {
        //    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }
    
        }
    
    private void memAction(){
        if(memory!=""){
            mem.setText("M");
        }
        else{
            mem.setText("");
        }
    }
    private void memActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memActionPerformed
        // TODO add your handling code here:
        //mem.setText("111");
    }//GEN-LAST:event_memActionPerformed

    private void mcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mcActionPerformed
        // TODO add your handling code here:
        memory="";
    }//GEN-LAST:event_mcActionPerformed

    private void rootActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rootActionPerformed
        // TODO add your handling code here:
        answerField.setText(String.valueOf(Math.sqrt(Double.valueOf(answerField.getText().toString()))));
    }//GEN-LAST:event_rootActionPerformed

    private void sinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sinActionPerformed
        // TODO add your handling code here:
        answerField.setText(String.valueOf(Math.sin(Double.valueOf(answerField.getText().toString()))));
    }//GEN-LAST:event_sinActionPerformed

    private void cosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cosActionPerformed
        // TODO add your handling code here:
        answerField.setText(String.valueOf(Math.cos(Double.valueOf(answerField.getText().toString()))));
    }//GEN-LAST:event_cosActionPerformed

    private void tanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tanActionPerformed
        // TODO add your handling code here:
        answerField.setText(String.valueOf(Math.tan(Double.valueOf(answerField.getText().toString()))));
    }//GEN-LAST:event_tanActionPerformed

    private void lnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lnActionPerformed
        // TODO add your handling code here:
        answerField.setText(String.valueOf(Math.log(Double.valueOf(answerField.getText().toString()))));
    }//GEN-LAST:event_lnActionPerformed

    private void logActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logActionPerformed
        // TODO add your handling code here:
        answerField.setText(String.valueOf(Math.log10(Double.valueOf(answerField.getText().toString()))));
    }//GEN-LAST:event_logActionPerformed

    private void tenxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tenxActionPerformed
        // TODO add your handling code here:
        answerField.setText(String.valueOf(Math.pow(10,Double.valueOf(answerField.getText().toString()))));
    }//GEN-LAST:event_tenxActionPerformed

    private void nfactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nfactActionPerformed
        // TODO add your handling code here:
        double b=fact(Double.valueOf(answerField.getText().toString()));
        answerField.setText(String.valueOf(b));
    }//GEN-LAST:event_nfactActionPerformed

    private double fact(double d){
        int i=(int)d;
        if(d==0){
            return 1;
        }
        return i*fact(i-1);
    }
    
    private void x2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_x2ActionPerformed
        // TODO add your handling code here:
        answerField.setText(String.valueOf(Math.pow(Double.valueOf(answerField.getText().toString()),2)));
    }//GEN-LAST:event_x2ActionPerformed
    
    
   
    public void result(){
        while(!arr.isEmpty()){
            if(arr.contains("^")){
                int index=arr.lastIndexOf("^");
                double num1=Double.parseDouble(nums.get(index));
                double num2=Double.parseDouble(nums.get(index+1));
                double ans=Math.pow(num1, num2);
                nums.remove(index+1);
                nums.remove(index);
                nums.add(index, String.valueOf(ans));
                arr.remove(index);
            }
             
             else if(arr.contains("v")){
                int index=arr.lastIndexOf("v");
                double num1=Double.parseDouble(nums.get(index));
                double num2=Double.parseDouble(nums.get(index+1));
                double ans=Math.pow(num1, 1/num2);
                nums.remove(index+1);
                nums.remove(index);
                nums.add(index, String.valueOf(ans));
                arr.remove(index);
            }
             else if(arr.contains("/")){
                int index=arr.lastIndexOf("/");
                double num1=Double.parseDouble(nums.get(index));
                double num2=Double.parseDouble(nums.get(index+1));
                double ans=num1/num2;
                nums.remove(index+1);
                nums.remove(index);
                
                nums.add(index, String.valueOf(ans));
                arr.remove(index);
            }
            else if(arr.contains("*")){
                int index=arr.lastIndexOf("*");
                double num1=Double.parseDouble(nums.get(index));
                double num2=Double.parseDouble(nums.get(index+1));
                double ans=num1*num2;
                nums.remove(index+1);
                nums.remove(index);
                
                nums.add(index, String.valueOf(ans));
                arr.remove(index);
            }
            else if(arr.contains("+")){
                int index=arr.lastIndexOf("+");
                double num1=Double.parseDouble(nums.get(index));
                double num2=Double.parseDouble(nums.get(index+1));
                double ans=num1+num2;
                nums.remove(index+1);
                nums.remove(index);
                
                nums.add(index, String.valueOf(ans));
                arr.remove(index);
            }
            else if(arr.contains("-")){
                int index=arr.lastIndexOf("-");
                double num1=Double.parseDouble(nums.get(index));
                double num2=Double.parseDouble(nums.get(index+1));
                double ans=num1-num2;
                nums.remove(index+1);
                nums.remove(index);
                
                nums.add(index, String.valueOf(ans));
                arr.remove(index);
            }
        }
        
     
        
        
    }
    
    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CalculatorForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CalculatorForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CalculatorForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalculatorForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new CalculatorForm().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(CalculatorForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button add;
    private javax.swing.JTextField answerField;
    private java.awt.Button backspace;
    private java.awt.Button clear;
    private java.awt.Button clrHistory;
    private java.awt.Button cos;
    private java.awt.Button decimal;
    private java.awt.Button div;
    private java.awt.Button eight;
    private java.awt.Button equals;
    private java.awt.Button five;
    private java.awt.Button four;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSlider1;
    private java.awt.Button ln;
    private java.awt.Button log;
    private java.awt.Button madd;
    private java.awt.Button mc;
    public javax.swing.JTextField mem;
    private java.awt.Button minus;
    private java.awt.Button mr;
    private java.awt.Button mul;
    private java.awt.Button nfact;
    private java.awt.Button nine;
    private java.awt.Button one;
    private java.awt.Button pi;
    private java.awt.Button root;
    private java.awt.Button rooty;
    private java.awt.Button seven;
    private java.awt.Button sin;
    private java.awt.Button six;
    private java.awt.Button sub;
    private java.awt.Button tan;
    private java.awt.Button tenx;
    private javax.swing.JTextField textQuestion;
    private java.awt.Button three;
    private java.awt.Button two;
    private javax.swing.JTextArea txtHistory;
    private java.awt.Button x2;
    private java.awt.Button xy;
    private java.awt.Button zero;
    // End of variables declaration//GEN-END:variables
}
